/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   multipart-payload-editor.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

import {ValidatableMixin} from '@anypoint-web-components/validatable-mixin/validatable-mixin.js';

import {ApiFormMixin} from '@api-components/api-form-mixin/api-form-mixin.js';

declare namespace ApiComponents {

  /**
   * Multipart payload editor for ARC/API Console body editor.
   *
   * On supported browsers (full support for FormData, Iterator and ArrayBuffer) it will render a
   * UI controls to generate payload message preview.
   *
   * It produces a FormData object that can be used in XHR / Fetch or transformed to ArrayBuffer to be
   * used in socket connection.
   *
   * ### Example
   * ```html
   * <multipart-payload-editor value="{{form}}"></multipart-payload-editor>
   * ```
   *
   * ## Data model from FormData
   *
   * The element creates a data model for the form view from FormData object.
   * The limitation of this solution is that the information about initial part type
   * is lost. In case when the user specified the part as a text part but also added
   * part content type it will be recognized as the file part.
   *
   * Note: this only works in browsers that support full FormData spec which rules
   * out any Microsoft product. **You have to include polyfills for the FormData.**
   */
  class MultipartPayloadEditor extends
    ValidatableMixin(
    ApiFormMixin(
    Object)) {
    model: any;

    /**
     * Value of this form
     */
    value: FormData|null;

    /**
     * true if the message preview is opened
     */
    previewOpened: boolean|null|undefined;
    onmodel: Function|null;
    onchange: Function|null;

    /**
     * true if the transformer is generating the message
     */
    generatingPreview: boolean|null|undefined;

    /**
     * Generated body message preview
     */
    messagePreview: string|null|undefined;
    _messagePreviewCode: string|null|undefined;

    /**
     * Enables Anypoint legacy styling
     */
    legacy: boolean|null|undefined;

    /**
     * Enables Material Design outlined style
     */
    outlined: boolean|null|undefined;

    /**
     * When set the editor is in read only mode.
     */
    readOnly: boolean|null|undefined;

    /**
     * When set all controls are disabled in the form
     */
    disabled: boolean|null|undefined;
    _previewTemplate(): any;
    _formItemTemplate(item: any, index: any): any;
    _formTemplate(): any;
    render(): any;

    /**
     * Registers an event handler for given type
     *
     * @param eventType Event type (name)
     * @param value The handler to register
     */
    _registerCallback(eventType: String|null, value: Function|null): void;
    firstUpdated(): void;

    /**
     * Appends new file form row.
     * This changes `model`.
     */
    addFile(): void;

    /**
     * Appends empty text field to the form.
     * This changes `model`.
     */
    addText(): void;

    /**
     * Handler for value change.
     * If the element is opened then it will fire change event.
     */
    _valueChanged(value: FormData|null): void;

    /**
     * Transforms FormData into the data model.
     * Sets new model data.
     *
     * @param data Form data to be restored.
     */
    _restoreFormData(data: FormData|null): Promise<any>|null;
    _modelForParts(entries: Iterator|null, textParts: any[]|null, result: any[]|null): Promise<any[]|null>;

    /**
     * It dispatches `api-property-model-build` custom event that is handled by
     * `api-view-model-transformer` to build model item.
     * This assumes that the transformer element is already in the DOM.
     *
     * @param defs Defaults for model
     * @returns Tranformed object.
     */
    _createModelObject(defs: object|null): object|null;

    /**
     * Transforms `Blob` to string.
     *
     * @param blob A blob to read.
     * @returns Read content.
     */
    _blobToString(blob: Blob|null): Promise<String|null>;

    /**
     * Tests if current model and FormData object represent the same form data.
     *
     * @param model Model to test
     * @param value Form data with values
     * @returns True if model represents data in FormData object
     */
    _modelAndValueMatch(model: any[]|null, value: FormData|null): Boolean|null;

    /**
     * Generates a message and displays highlighted content of the message.
     */
    _previewOpenedChanged(opened: any): any;

    /**
     * Renders a message in the paper-toast
     *
     * @param text A message to render
     */
    _toastMessage(text: String|null): void;

    /**
     * Called when the model chage. Regenerates the FormData object.
     */
    _modelChanged(model: any[]|null): void;

    /**
     * Generates FormData from the model.
     * For the browsers with full FormData support it will generate Form data object from form
     * element. It means that it will have only basic support.
     * For browsers with full FormData support it will contain all properties (including
     * mime types).
     *
     * @param model View data model.
     */
    createFormData(model: any[]|null): FormData|null;

    /**
     * Generates the FormData object from the model instead of the form.
     *
     * Text form parts with a mime type are added to the form as instance of Blob.
     * Name of such item is added to generated from data's `_arcMeta.textParts`
     * list so the processors can identify them.
     *
     * @param model The model to generate form data from.
     * @returns Form data from model or undefined if model is empty.
     */
    _getFormData(model: any[]|null): FormData|null|undefined;

    /**
     * Returns a FormData object depending if current form has any value.
     * Text items can be empty.
     *
     * @param model The model to generate form data from.
     * @returns Form data from model or undefined if model
     * is empty.
     */
    _getLegacyFormData(model: any[]|null): FormData|null|undefined;

    /**
     * Generates a preview message from the FormData object.
     *
     * @returns A promise fulfilled with the content. Content can be undefined
     * if message couldn't be generated because of lack of support.
     */
    _generatePreview(): Promise<any>|null;

    /**
     * Coppies current response text value to clipboard.
     */
    _copyToClipboard(e: Event|null): void;
    _resetCopyButtonState(button: any): void;
    _previewHandler(e: any): void;
    _nameChangeHandler(e: any): void;
    _valueChangeHandler(e: any): void;
    _typeChangeHandler(e: any): void;
    _propertyHandler(prop: any, e: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "multipart-payload-editor": ApiComponents.MultipartPayloadEditor;
  }
}
